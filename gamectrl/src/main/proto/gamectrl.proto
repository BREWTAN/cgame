

syntax = "proto3";
//import "google/protobuf/any.proto";

package starstart.cgw.gamectrl.pbgens;
	

enum PBModule{
	CGC = 0;
	NDP = 1;// 节点处理调用
};


enum PBCommand{
	CUR = 0 ;//当前期号
	FLS = 1 ;//根据参数生成期号流程
	ISG = 2;//生成游戏奖期
	
	LST = 3;//奖期获取
	
	SRA = 100 ;//流程控制器
	SRF = 101 ;//异常流程控制器
};

message PBIssueFlowGen
{
	message PBIFlowStep{
		string ltype = 2;//游戏类型
		string gs_ecode = 3;//状态简称，英文
		string gs_chcode = 4;//状态简称，中文
		string gs_desc = 5;//状态描述，中文
		int32 timesec_offset = 6; //以秒为单位的偏移
		string gs_order = 7; //英文数字编号
		string next_orders = 8;//下一个状态列表,逗号","分开
		string wait_orders = 9;//结束前需要等待的节点
		string node_type = 10;//节点类型
		string auto_gonext = 11; //是否为自动节点
		string status = 12; //当前状态
		
	}
	string ltype = 1  ;//游戏类型
	repeated PBIFlowStep steps = 2; //状态的节点
	string override_exists = 3;//是否覆盖当前的
	string 	reload_type = 4 ;//重新加载类型,1:从资源文件里面，从数据库	
} 
message PBIssueFlowInit{
	repeated PBIssueFlowGen  flows = 1;//
}

message PBRetCtrl
{
	string retcode = 1; //返回状态码，000000，表示成功
	string retmsg = 2;//返回消息
	//Any data = 3;//返回的数据
};

message PBRetIssueFlowGen 
{
	string retcode = 1; //返回状态码，000000，表示成功
	string retmsg = 2;//返回消息
	message IssueFlow{
		string ltype = 1;//游戏类型
		uint32 steps_count = 100;//插入的步骤总数	
	}
	
	IssueFlow flows = 3;//游戏列表
	
}


message PBIssue{
	string issue_id = 1;//期号编号：ltype-issue_no
	string ltype = 2;//游戏类型
	string issue_no =3;//奖期编号
	string lottery_no = 4;//开奖号码
	string issue_date = 5;//日期：YYYYMMDD
	string pre_stime = 6;//预期开始时间
	string pre_etime = 7;//预期结束时间
	string sale_stime = 8;//销售开始时间
	string sale_etime = 9;//销售结束时间
	string real_stime = 10;//实际开始时间
	string real_etime = 11;//实际结束时间
	string cancel_ltime = 12;//最后可撤单时间
	string create_time = 19;//创建时间
	string modify_time = 20;//最后修改时间
	string issue_status = 21;//游戏状态
	
}

message PBIssueGen
{
	string ltype = 1  ;//游戏类型
	string override_exists = 3;//是否覆盖当前的
	repeated string days = 4 ;//奖期的日期
	int32	offset = 5;//从第几期开始
	int32	limit = 6;//个数限制，0表示无限制
	
	map<int32,string> pre_stimes = 10;//指定某一期预售时间格式"HH:mm:ss";
	string pres_offsec = 11 ;//每一期提前开启销售时间
	string prec_offsec = 12;//每一期提前截止销售时间
}
	
message PBRetIssueGen
{
	string retcode = 1; //返回状态码，000000，表示成功
	string retmsg = 2;//返回消息
	PBIssueGen request=100;
	
	repeated PBIssue issues = 101;//奖期列表 
}

message PBIssueSteps
{
	string issue_step_id = 1;
	string ltype = 2;
	string issue_no = 3;
	string step_status = 4;
	string create_time = 5;
	string modify_time = 6;
	string operator_id = 7;
	string gs_ecode = 8;
	string gs_chcode = 9;
	int32 timesec_offset = 10;
	string gs_order = 11;
	string next_orders = 12;
	int64 ref_param_gen_id = 13;
	string auto_gonext = 14;
	int32 retry_times = 15;
	string failed_reason = 16;
}

message PBStepCtrl
{
	string ltype = 1  ;//游戏类型
	string gs_order = 3;//节点order
	string issue_no  = 10;//期号
	string issue_step_id = 11;//步骤id
	string step_operator = 12;//操作者
	PBIssueSteps issue_step  = 20;//步骤对象
	
}
	
message PBRetStepCtrl
{
	string retcode = 1; //返回状态码，000000，表示成功
	string retmsg = 2;//返回消息
	string step_operator = 100;//操作者
	string bizcode = 101;//业务码
}



message PBIssueFetch
{
	string ltype = 1  ;//游戏类型
	string  issue_day = 4 ;//奖期的日期
	int32	offset = 5;//从第几期开始
	int32	limit = 6;//个数限制，0表示无限制
	bool showall = 7;//是否显示全部：默认不全部显示，显示比当前时间早的
}
	
message PBRetIssueFetch
{
	string retcode = 1; //返回状态码，000000，表示成功
	string retmsg = 2;//返回消息
	
	repeated PBIssue issues = 101;//奖期列表 
}



